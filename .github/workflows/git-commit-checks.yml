name: GitHub Action CI

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, synchronize]

jobs:
    pull_request_job:
        name: Git commit checker
        if: ${{ github.event.pull_request }}
        runs-on: ubuntu-latest
        steps:
          - name: Check out the code
            uses: actions/checkout@v2
            with:
                # Get all branches and history
                fetch-depth: 0

          - name: Setup Python
            uses: actions/setup-python@v2
            with:
              python-version: '3.x'

          - name: Get the GitPython and PyGithub modules
            run: pip install gitpython PyGithub

          # Note that we specify GITHUB_SHA^2 to avoid the merge
          # commit that github puts here; "^2" means the 2nd commit in
          # the set of GITHUB_SHA's parents.  Since we *know* it's a
          # merge commit, we can ask for the 2nd one (GitHub always
          # has the 1st commit be the base ref and the 2nd commit be
          # the last commit in the PR).
          - name: Check all git commits
            run: |
              $GITHUB_WORKSPACE/.github/workflows/git-commit-checks.py \
                --pr ${{ github.event.pull_request.number }} \
                --github-base-ref $GITHUB_BASE_REF \
                --github-sha "$GITHUB_SHA^2"
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    # For Github issue comments (which also include comments on PRs
    # (!)), we have to do extra work because Github does not give us
    # the PR metadata.  Specifically:
    #
    # 1. We have to get the Git base / head refs
    # 2. We have to set the test result manually (because this action is
    # not associated with a PR, so it doesn't automatically set the CI
    # check run test per the output of this action)
    #
    # The issue_job below is *essentially* the same workflow as the
    # pull_request_job, but with extra steps to do the above-listed
    # work.
    issue_job:
        name: Git commit checker (comment)
        if: ${{ github.event.issue.pull_request }}
        runs-on: ubuntu-latest
        steps:
          # Get the PR metadata.  We don't have a git clone yet (and
          # can't get one until we have the PR metadata), so we do
          # this with inline GitHub script.
          - name: Find the corresponding PR comment and PR meta data
            id: git-refs
            uses: actions/github-script@v3
            if: ${{ contains(github.event.comment.body, 'bot:retest') || contains(github.event.comment.body, 'bot:ompi:retest') || contains(github.event.comment.body, 'bot:github:retest') }}
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                pr = await github.pulls.get({
                    owner: '${{ github.repository_owner }}',
                    repo: '${{ github.event.repository.name }}',
                    pull_number: ${{ github.event.issue.number }},
                });

                // Set these as Github output values so that they're
                // accessible in later steps (below).
                console.log("::set-output name=GITHUB_BASE_REF::" +
                            pr.data.base.ref);
                console.log("::set-output name=GITHUB_REF::" +
                            pr.data.head.ref);
                console.log("::set-output name=BOT_RETEST::1");

                // Set a rocket reaction so that the user knows we saw
                // and reacted to their command
                await github.reactions.createForIssueComment({
                    owner: '${{ github.repository_owner }}',
                    repo: '${{ github.event.repository.name }}',
                    comment_id: ${{ github.event.comment.id }},
                    content: 'rocket',
                });

          - name: Check out the code
            if: ${{ steps.git-refs.outputs.BOT_RETEST == 1 }}
            uses: actions/checkout@v2
            with:
                # Get all branches and history
                fetch-depth: 0
                # Since this is an issue, there's no ref.  Use the
                # output from the prior step.
                ref: ${{ steps.git-refs.outputs.GITHUB_REF }}

          - name: Setup Python
            if: ${{ steps.git-refs.outputs.BOT_RETEST == 1 }}
            uses: actions/setup-python@v2
            with:
              python-version: '3.x'

          - name: Get the GitPython and PyGithub modules
            if: ${{ steps.git-refs.outputs.BOT_RETEST == 1 }}
            run: pip install gitpython PyGithub

          - name: Check all git commits
            if: ${{ steps.git-refs.outputs.BOT_RETEST == 1 }}
            id: check-commits
            run: |
              $GITHUB_WORKSPACE/.github/workflows/git-commit-checks.py \
                --pr ${{ github.event.issue.number }} \
                --github-base-ref ${{ steps.git-refs.outputs.GITHUB_BASE_REF }} \
                --github-sha "${{ steps.git-refs.outputs.GITHUB_REF }}"
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          - name: Set check result
            if: ${{ steps.git-refs.outputs.BOT_RETEST == 1 }}
            uses: actions/github-script@v3
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                response = await github.checks.listForRef({
                    owner: '${{ github.repository_owner }}',
                    repo: '${{ github.event.repository.name }}',
                    ref: '${{ steps.git-refs.outputs.GITHUB_REF }}',
                });

                console.log("JMS Got total run count: " + response.data.total_count);
                var i, id = -1
                for (i = 0; i < response.data.total_count; ++i) {
                    console.log("JMS Got runs["+i+"].name: " + response.data.check_runs[i].name);
                    console.log("JMS Got runs["+i+"].app.name: " + response.data.check_runs[i].app.name);
                    console.log("JMS Got runs["+i+"].id: " + response.data.check_runs[i].id);

                    if (response.data.check_runs[i].name == 'Git commit checker' &&
                        response.data.check_runs[i].app.name == 'GitHub Actions') {
                        id = response.data.check_runs[i].id
                        break;
                    }
                }

                if (id >= 0) {
                        await github.checks.update({
                        owner: '${{ github.repository_owner }}',
                        repo: '${{ github.event.repository.name }}',
                        check_run_id: id,
                        details_url: 'https://github.com/${{github.respository_owner}}/${{github.event.repository.name}}/pull/${{github.event.issue.number}}/checks?check_run_id=${{github.run_id}}',
                        status: 'completed',
                        conclusion: '${{ steps.check-commits.conclusion }}',
                    });
                    console.log("Updated status of job ID " + id);
                } else {
                    console.log("Unable to find GitHub check job ID to update!");
                }
